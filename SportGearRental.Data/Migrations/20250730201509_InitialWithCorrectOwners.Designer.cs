// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportGearRental.Data;

#nullable disable

namespace SportGearRental.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250730201509_InitialWithCorrectOwners")]
    partial class InitialWithCorrectOwners
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a1f2e3d4-c5b6-47f8-9876-123456789abc",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b2f3e4d5-a6b7-48c9-8765-abcdef123456",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c3d4e5f6-7890-4abc-def1-234567890abc",
                            RoleId = "a1f2e3d4-c5b6-47f8-9876-123456789abc"
                        },
                        new
                        {
                            UserId = "d4e5f6a7-8901-4bcd-efa2-34567890bcde",
                            RoleId = "b2f3e4d5-a6b7-48c9-8765-abcdef123456"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SportGearRental.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Is the account deleted or not");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Username of the user");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3d4e5f6-7890-4abc-def1-234567890abc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc35b38d-21c4-4cc0-ae6e-a804e0d91dd9",
                            Email = "admin@gear.bg",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GEAR.BG",
                            NormalizedUserName = "ADMIN@GEAR.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEId8QT3dULt5TRbghc2uSnnKQKINd93ayX42ku5Z6Ee7aHEJczku+cNz1X7U4/VJWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd85155f-0102-4401-8d46-82f5b3364e5e",
                            TwoFactorEnabled = false,
                            UserName = "admin@gear.bg"
                        },
                        new
                        {
                            Id = "d4e5f6a7-8901-4bcd-efa2-34567890bcde",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "047da4a6-6064-4ba8-a44e-87f62c2dee5e",
                            Email = "user@gear.bg",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GEAR.BG",
                            NormalizedUserName = "USER@GEAR.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEMJ+fF+DkXVc74s4pUCsP4JqY/8OfBZDbmRha1rHB+1yQKCbEYWveFwkk2biZNb97A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b10c04a9-3b67-4b2c-9955-edff42bcfc56",
                            TwoFactorEnabled = false,
                            UserName = "user@gear.bg"
                        });
                });

            modelBuilder.Entity("SportGearRental.Data.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9bf9e57-1685-4c89-bafb-ff5af830be8a"),
                            Name = "Найк"
                        },
                        new
                        {
                            Id = new Guid("e358efa4-1e22-4ac1-8f98-cd78e9a6ccf3"),
                            Name = "Адидас"
                        },
                        new
                        {
                            Id = new Guid("3d6f0a88-9d64-4a38-9f2c-52deff0a92d2"),
                            Name = "Пума"
                        },
                        new
                        {
                            Id = new Guid("1c2d0d89-62e6-4e3b-8fcd-125c5bb8f2a1"),
                            Name = "Колумбия"
                        },
                        new
                        {
                            Id = new Guid("0d9a5b76-48b1-4eea-8c1d-cdff4a56b57a"),
                            Name = "Саломон"
                        });
                });

            modelBuilder.Entity("SportGearRental.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            Name = "Обувки"
                        },
                        new
                        {
                            Id = new Guid("9c858901-8a57-4791-81fe-4c455b099bc9"),
                            Name = "Дрехи"
                        },
                        new
                        {
                            Id = new Guid("7c9e6679-7425-40de-944b-e07fc1f90ae7"),
                            Name = "Аксесоари"
                        },
                        new
                        {
                            Id = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Name = "Фитнес оборудване"
                        },
                        new
                        {
                            Id = new Guid("6fa459ea-ee8a-3ca4-894e-db77e160355e"),
                            Name = "Велосипеди"
                        });
                });

            modelBuilder.Entity("SportGearRental.Data.Models.GearCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("GearConditions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1a52b5b-4c3d-44d0-80f8-5ad836eeb09c"),
                            Description = "Изцяло ново, неизползвано",
                            Name = "Ново"
                        },
                        new
                        {
                            Id = new Guid("862f2c20-cb09-4e6a-b4d2-92d0d4e3d5f6"),
                            Description = "Много леко използвано",
                            Name = "Като ново"
                        },
                        new
                        {
                            Id = new Guid("73c2f799-3e94-47bc-8c29-1d157f243bbc"),
                            Description = "Използвано, но в добро състояние",
                            Name = "Добро"
                        },
                        new
                        {
                            Id = new Guid("22a963d9-2a3b-4baf-943d-9e6a51b8db78"),
                            Description = "С видими следи от употреба",
                            Name = "Средно"
                        },
                        new
                        {
                            Id = new Guid("5f0e3e1f-4a76-4c4e-9d34-bdeff33f76a9"),
                            Description = "Със сериозни дефекти",
                            Name = "Лошо"
                        });
                });

            modelBuilder.Entity("SportGearRental.Data.Models.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Is the entity deleted (soft delete)?");

                    b.Property<DateTime>("RentalEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RentalStartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SportGearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SportGearId");

                    b.HasIndex("UserId");

                    b.ToTable("Rentals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"),
                            IsDeleted = false,
                            RentalEndDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalStartDate = new DateTime(2025, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SportGearId = new Guid("8f14e45f-ceea-4bfc-9274-b7987d4a59d9"),
                            TotalPrice = 50.00m,
                            UserId = "d4e5f6a7-8901-4bcd-efa2-34567890bcde"
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f6a7-48b9-9c0d-1e2f3a4b5c6d"),
                            IsDeleted = false,
                            RentalEndDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalStartDate = new DateTime(2025, 7, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SportGearId = new Guid("acbd18db-4cc2-43e2-a05d-dcbbd298db96"),
                            TotalPrice = 75.50m,
                            UserId = "d4e5f6a7-8901-4bcd-efa2-34567890bcde"
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-a7b8-49c0-ad1e-2f3a4b5c6d7e"),
                            IsDeleted = false,
                            RentalEndDate = new DateTime(2025, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalStartDate = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SportGearId = new Guid("b6d81b36-1b9e-4f1d-9e0f-5b3a9d3b21d6"),
                            TotalPrice = 30.00m,
                            UserId = "c3d4e5f6-7890-4abc-def1-234567890abc"
                        });
                });

            modelBuilder.Entity("SportGearRental.Data.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Is the entity deleted (soft delete)?");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("SportGearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SportGearId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2e3a1b4-7f9c-4d26-bf6e-0a4eae9d0bfb"),
                            Content = "Great equipment, very durable!",
                            IsDeleted = false,
                            Rating = 5,
                            SportGearId = new Guid("8f14e45f-ceea-4bfc-9274-b7987d4a59d9"),
                            UserId = "d4e5f6a7-8901-4bcd-efa2-34567890bcde"
                        },
                        new
                        {
                            Id = new Guid("6d7f2c91-ea12-4c88-9b3a-8f7d5a0e4b9d"),
                            Content = "Good value for money.",
                            IsDeleted = false,
                            Rating = 4,
                            SportGearId = new Guid("acbd18db-4cc2-43e2-a05d-dcbbd298db96"),
                            UserId = "d4e5f6a7-8901-4bcd-efa2-34567890bcde"
                        },
                        new
                        {
                            Id = new Guid("c9f1d8b2-3a47-4d89-8e7c-12a9d1e8f3b2"),
                            Content = "Works perfectly for my needs.",
                            IsDeleted = false,
                            Rating = 5,
                            SportGearId = new Guid("37b51d19-59a7-4ed4-8996-0b1d0c428a92"),
                            UserId = "d4e5f6a7-8901-4bcd-efa2-34567890bcde"
                        },
                        new
                        {
                            Id = new Guid("d4b6c1a3-7f56-4a2e-9bc7-efa7a1234567"),
                            Content = "Highly recommend this gear!",
                            IsDeleted = false,
                            Rating = 5,
                            SportGearId = new Guid("b6d81b36-1b9e-4f1d-9e0f-5b3a9d3b21d6"),
                            UserId = "c3d4e5f6-7890-4abc-def1-234567890abc"
                        },
                        new
                        {
                            Id = new Guid("e3f4d2b1-1234-4c5d-a789-6b7c8d9e0f1a"),
                            Content = "Good quality and fast delivery.",
                            IsDeleted = false,
                            Rating = 4,
                            SportGearId = new Guid("a87ff679-a2f3-4f54-8e8f-0fa6d8b7cd55"),
                            UserId = "c3d4e5f6-7890-4abc-def1-234567890abc"
                        },
                        new
                        {
                            Id = new Guid("f7e8d9c0-4567-4b8d-b12f-34a5b6c7d8e9"),
                            Content = "Perfect for winter sports.",
                            IsDeleted = false,
                            Rating = 5,
                            SportGearId = new Guid("73feffa4-7f1b-4e14-90c6-b42b041bf63f"),
                            UserId = "c3d4e5f6-7890-4abc-def1-234567890abc"
                        });
                });

            modelBuilder.Entity("SportGearRental.Data.Models.SportGear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The description of the gear");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("The image URL of the gear");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Is the entity deleted (soft delete)?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the gear");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The price per day of the gear");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("OwnerId");

                    b.ToTable("SportGears");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f14e45f-ceea-4bfc-9274-b7987d4a59d9"),
                            BrandId = new Guid("c9bf9e57-1685-4c89-bafb-ff5af830be8a"),
                            CategoryId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            ConditionId = new Guid("f1a52b5b-4c3d-44d0-80f8-5ad836eeb09c"),
                            Description = "Леки маратонки за бягане с въздушна възглавница.",
                            ImageUrl = "https://example.com/images/nike-pegasus.jpg",
                            IsDeleted = false,
                            Name = "Nike Air Zoom Pegasus",
                            OwnerId = "d4e5f6a7-8901-4bcd-efa2-34567890bcde",
                            PricePerDay = 12.50m
                        },
                        new
                        {
                            Id = new Guid("acbd18db-4cc2-43e2-a05d-dcbbd298db96"),
                            BrandId = new Guid("e358efa4-1e22-4ac1-8f98-cd78e9a6ccf3"),
                            CategoryId = new Guid("9c858901-8a57-4791-81fe-4c455b099bc9"),
                            ConditionId = new Guid("862f2c20-cb09-4e6a-b4d2-92d0d4e3d5f6"),
                            Description = "Водоустойчиво яке за планина.",
                            ImageUrl = "https://example.com/images/adidas-terrex.jpg",
                            IsDeleted = false,
                            Name = "Adidas Terrex Jacket",
                            OwnerId = "d4e5f6a7-8901-4bcd-efa2-34567890bcde",
                            PricePerDay = 15.00m
                        },
                        new
                        {
                            Id = new Guid("37b51d19-59a7-4ed4-8996-0b1d0c428a92"),
                            BrandId = new Guid("3d6f0a88-9d64-4a38-9f2c-52deff0a92d2"),
                            CategoryId = new Guid("7c9e6679-7425-40de-944b-e07fc1f90ae7"),
                            ConditionId = new Guid("73c2f799-3e94-47bc-8c29-1d157f243bbc"),
                            Description = "Удобни ръкавици за фитнес и тежести.",
                            ImageUrl = "https://example.com/images/puma-gloves.jpg",
                            IsDeleted = false,
                            Name = "Puma Fitness Gloves",
                            OwnerId = "d4e5f6a7-8901-4bcd-efa2-34567890bcde",
                            PricePerDay = 5.00m
                        },
                        new
                        {
                            Id = new Guid("73feffa4-7f1b-4e14-90c6-b42b041bf63f"),
                            BrandId = new Guid("1c2d0d89-62e6-4e3b-8fcd-125c5bb8f2a1"),
                            CategoryId = new Guid("7c9e6679-7425-40de-944b-e07fc1f90ae7"),
                            ConditionId = new Guid("73c2f799-3e94-47bc-8c29-1d157f243bbc"),
                            Description = "Топли ръкавици за зимни спортове.",
                            ImageUrl = "https://example.com/images/columbia-gloves.jpg",
                            IsDeleted = false,
                            Name = "Columbia Winter Gloves",
                            OwnerId = "c3d4e5f6-7890-4abc-def1-234567890abc",
                            PricePerDay = 7.50m
                        },
                        new
                        {
                            Id = new Guid("1dcca233-c2a1-4f1e-9d9f-c2147b0ccf8a"),
                            BrandId = new Guid("0d9a5b76-48b1-4eea-8c1d-cdff4a56b57a"),
                            CategoryId = new Guid("7c9e6679-7425-40de-944b-e07fc1f90ae7"),
                            ConditionId = new Guid("f1a52b5b-4c3d-44d0-80f8-5ad836eeb09c"),
                            Description = "Очила за ски и сноуборд с високо качество.",
                            ImageUrl = "https://example.com/images/salomon-goggles.jpg",
                            IsDeleted = false,
                            Name = "Salomon Ski Goggles",
                            OwnerId = "c3d4e5f6-7890-4abc-def1-234567890abc",
                            PricePerDay = 10.00m
                        },
                        new
                        {
                            Id = new Guid("b6d81b36-1b9e-4f1d-9e0f-5b3a9d3b21d6"),
                            BrandId = new Guid("c9bf9e57-1685-4c89-bafb-ff5af830be8a"),
                            CategoryId = new Guid("9c858901-8a57-4791-81fe-4c455b099bc9"),
                            ConditionId = new Guid("862f2c20-cb09-4e6a-b4d2-92d0d4e3d5f6"),
                            Description = "Дишащи шорти за бягане и спорт.",
                            ImageUrl = "https://example.com/images/nike-shorts.jpg",
                            IsDeleted = false,
                            Name = "Nike Running Shorts",
                            OwnerId = "c3d4e5f6-7890-4abc-def1-234567890abc",
                            PricePerDay = 6.00m
                        },
                        new
                        {
                            Id = new Guid("a87ff679-a2f3-4f54-8e8f-0fa6d8b7cd55"),
                            BrandId = new Guid("e358efa4-1e22-4ac1-8f98-cd78e9a6ccf3"),
                            CategoryId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            ConditionId = new Guid("f1a52b5b-4c3d-44d0-80f8-5ad836eeb09c"),
                            Description = "Удобен постел за фитнес и йога.",
                            ImageUrl = "https://example.com/images/adidas-mat.jpg",
                            IsDeleted = false,
                            Name = "Adidas Fitness Mat",
                            OwnerId = "c3d4e5f6-7890-4abc-def1-234567890abc",
                            PricePerDay = 8.00m
                        },
                        new
                        {
                            Id = new Guid("e4da3b7f-bbce-4a1b-b0f4-35e1d9f2b35a"),
                            BrandId = new Guid("1c2d0d89-62e6-4e3b-8fcd-125c5bb8f2a1"),
                            CategoryId = new Guid("6fa459ea-ee8a-3ca4-894e-db77e160355e"),
                            ConditionId = new Guid("73c2f799-3e94-47bc-8c29-1d157f243bbc"),
                            Description = "Велосипед с 21 скорости и амортисьори.",
                            ImageUrl = "https://example.com/images/bike-x200.jpg",
                            IsDeleted = false,
                            Name = "Mountain Bike X200",
                            OwnerId = "c3d4e5f6-7890-4abc-def1-234567890abc",
                            PricePerDay = 25.00m
                        },
                        new
                        {
                            Id = new Guid("1679091c-5a88-4e3e-96a4-7f3b3e7d9d3f"),
                            BrandId = new Guid("0d9a5b76-48b1-4eea-8c1d-cdff4a56b57a"),
                            CategoryId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            ConditionId = new Guid("862f2c20-cb09-4e6a-b4d2-92d0d4e3d5f6"),
                            Description = "Дебела постелка за йога с антислип покритие.",
                            ImageUrl = "https://example.com/images/yoga-mat-deluxe.jpg",
                            IsDeleted = false,
                            Name = "Yoga Mat Deluxe",
                            OwnerId = "c3d4e5f6-7890-4abc-def1-234567890abc",
                            PricePerDay = 9.00m
                        },
                        new
                        {
                            Id = new Guid("8e296a06-2b87-4f7d-bb57-1a7b1c5ca6e9"),
                            BrandId = new Guid("3d6f0a88-9d64-4a38-9f2c-52deff0a92d2"),
                            CategoryId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            ConditionId = new Guid("73c2f799-3e94-47bc-8c29-1d157f243bbc"),
                            Description = "Обувки за бягане в планината, устойчиви на кал и вода.",
                            ImageUrl = "https://example.com/images/trail-shoes.jpg",
                            IsDeleted = false,
                            Name = "Trail Running Shoes",
                            OwnerId = "c3d4e5f6-7890-4abc-def1-234567890abc",
                            PricePerDay = 13.50m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SportGearRental.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SportGearRental.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportGearRental.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SportGearRental.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportGearRental.Data.Models.Rental", b =>
                {
                    b.HasOne("SportGearRental.Data.Models.SportGear", "SportGear")
                        .WithMany("Rentals")
                        .HasForeignKey("SportGearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportGearRental.Data.Models.ApplicationUser", "User")
                        .WithMany("Rentals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportGear");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportGearRental.Data.Models.Review", b =>
                {
                    b.HasOne("SportGearRental.Data.Models.SportGear", "SportGear")
                        .WithMany("Reviews")
                        .HasForeignKey("SportGearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportGearRental.Data.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportGear");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportGearRental.Data.Models.SportGear", b =>
                {
                    b.HasOne("SportGearRental.Data.Models.Brand", "Brand")
                        .WithMany("SportGears")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportGearRental.Data.Models.Category", "Category")
                        .WithMany("SportGears")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportGearRental.Data.Models.GearCondition", "Condition")
                        .WithMany("SportGears")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportGearRental.Data.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Condition");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SportGearRental.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Rentals");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("SportGearRental.Data.Models.Brand", b =>
                {
                    b.Navigation("SportGears");
                });

            modelBuilder.Entity("SportGearRental.Data.Models.Category", b =>
                {
                    b.Navigation("SportGears");
                });

            modelBuilder.Entity("SportGearRental.Data.Models.GearCondition", b =>
                {
                    b.Navigation("SportGears");
                });

            modelBuilder.Entity("SportGearRental.Data.Models.SportGear", b =>
                {
                    b.Navigation("Rentals");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
