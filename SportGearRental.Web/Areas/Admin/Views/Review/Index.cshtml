@model IEnumerable<SportGearRental.ViewModels.Review.ReviewViewModel>
@using System.Linq
@{
    Layout = "_AdminLayout";
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
<style>
    body {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .review-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 2rem;
    }

    .page-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        color: white;
        text-align: center;
        box-shadow: 0 15px 35px rgba(102, 126, 234, 0.3);
        animation: slideInDown 0.6s ease-out;
    }

        .page-header h2 {
            font-size: 2.5rem;
            font-weight: 300;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 1rem;
        }

        .page-header p {
            opacity: 0.9;
            font-size: 1.1rem;
        }

    .stats-bar {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
        animation: fadeInUp 0.8s ease-out;
    }

    .stat-card {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        text-align: center;
        box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        transition: transform 0.3s ease;
    }

        .stat-card:hover {
            transform: translateY(-5px);
        }

    .stat-value {
        font-size: 2rem;
        font-weight: bold;
        color: #667eea;
        display: block;
    }

    .stat-label {
        color: #7f8c8d;
        font-size: 0.9rem;
        margin-top: 0.5rem;
    }

    .controls-section {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        align-items: center;
        justify-content: space-between;
    }

    .search-box {
        position: relative;
        flex: 1;
        min-width: 250px;
    }

        .search-box input {
            width: 100%;
            padding: 0.8rem 1rem 0.8rem 3rem;
            border: 2px solid #e1e8ed;
            border-radius: 50px;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

            .search-box input:focus {
                outline: none;
                border-color: #667eea;
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }

        .search-box i {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #7f8c8d;
        }

    .filter-buttons {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .filter-btn {
        padding: 0.6rem 1.2rem;
        border: 2px solid #e1e8ed;
        background: white;
        border-radius: 25px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .filter-btn:hover,
        .filter-btn.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }

    .reviews-grid {
        display: grid;
        gap: 1.5rem;
        animation: fadeInUp 1s ease-out;
    }

    .review-card {
        background: white;
        border-radius: 20px;
        padding: 2rem;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        transition: all 0.4s ease;
        position: relative;
        overflow: hidden;
        border: 1px solid #f0f0f0;
    }

        .review-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
        }

        .review-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #667eea, #764ba2);
            transform: scaleX(0);
            transition: transform 0.3s ease;
        }

        .review-card:hover::before {
            transform: scaleX(1);
        }

    .review-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 1rem;
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .user-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea, #764ba2);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        font-size: 1.2rem;
    }

    .user-details h4 {
        margin: 0;
        color: #2c3e50;
        font-size: 1.1rem;
    }

    .review-date {
        color: #7f8c8d;
        font-size: 0.9rem;
        margin-top: 0.2rem;
    }

    .rating-display {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .stars {
        display: flex;
        gap: 0.2rem;
    }

    .star {
        color: #ffd700;
        font-size: 1.2rem;
    }

        .star.empty {
            color: #e1e8ed;
        }

    .rating-text {
        background: linear-gradient(135deg, #667eea, #764ba2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        font-weight: bold;
    }

    .review-content {
        margin: 1.5rem 0;
        line-height: 1.6;
        color: #34495e;
        font-size: 1rem;
        position: relative;
    }

        .review-content::before {
            content: '"';
            font-size: 4rem;
            color: rgba(102, 126, 234, 0.2);
            position: absolute;
            top: -1rem;
            left: -0.5rem;
            font-family: serif;
        }

    .review-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 1.5rem;
        padding-top: 1rem;
        border-top: 1px solid #f0f0f0;
    }

    .action-btn {
        padding: 0.6rem 1.2rem;
        border: none;
        border-radius: 25px;
        cursor: pointer;
        font-size: 0.9rem;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
    }

    .btn-approve {
        background: linear-gradient(135deg, #2ecc71, #27ae60);
        color: white;
    }

        .btn-approve:hover {
            background: linear-gradient(135deg, #27ae60, #229954);
            transform: translateY(-2px);
            color: white;
            text-decoration: none;
        }

    .btn-delete {
        background: linear-gradient(135deg, #e74c3c, #c0392b);
        color: white;
    }

        .btn-delete:hover {
            background: linear-gradient(135deg, #c0392b, #a93226);
            transform: translateY(-2px);
            color: white;
            text-decoration: none;
        }

    .btn-view {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
    }

        .btn-view:hover {
            background: linear-gradient(135deg, #2980b9, #21618c);
            transform: translateY(-2px);
            color: white;
            text-decoration: none;
        }

    .no-reviews {
        text-align: center;
        padding: 4rem 2rem;
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        animation: fadeInUp 0.8s ease-out;
    }

        .no-reviews i {
            font-size: 4rem;
            color: #bdc3c7;
            margin-bottom: 1rem;
        }

        .no-reviews h3 {
            color: #7f8c8d;
            margin-bottom: 0.5rem;
        }

        .no-reviews p {
            color: #95a5a6;
        }

    .bulk-actions {
        background: white;
        border-radius: 15px;
        padding: 1rem 1.5rem;
        margin-bottom: 1rem;
        box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        display: none;
        align-items: center;
        gap: 1rem;
    }

        .bulk-actions.show {
            display: flex;
            animation: slideInDown 0.3s ease-out;
        }

    @@keyframes slideInDown {
        from

    {
        opacity: 0;
        transform: translateY(-30px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    @@keyframes fadeInUp {
        from

    {
        opacity: 0;
        transform: translateY(30px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    @@media (max-width: 768px) {
        .review-container

    {
        padding: 1rem;
    }

    .page-header h2 {
        font-size: 2rem;
        flex-direction: column;
        gap: 0.5rem;
    }

    .controls-section {
        flex-direction: column;
        align-items: stretch;
    }

    .filter-buttons {
        justify-content: center;
    }

    .review-header {
        flex-direction: column;
        gap: 1rem;
    }

    .review-actions {
        flex-wrap: wrap;
        justify-content: center;
    }

    }
</style>

<div class="review-container">
    <!-- Page Header -->
    <div class="page-header">
        <h2>
            <i class="fas fa-star"></i>
            Review Management
        </h2>
        <p>Manage and moderate customer reviews for your sport gear rental platform</p>
    </div>

    @if (Model != null && Model.Any())
    {
        <!-- Statistics Bar -->
        <div class="stats-bar">
            <div class="stat-card">
                <span class="stat-value">@Model.Count()</span>
                <div class="stat-label">Total Reviews</div>
            </div>
            <div class="stat-card">
                <span class="stat-value">@Model.Where(r => r.Rating >= 4).Count()</span>
                <div class="stat-label">Positive Reviews</div>
            </div>
            <div class="stat-card">
                <span class="stat-value">@(Model.Any() ? Math.Round(Model.Average(r => r.Rating), 1) : 0)</span>
                <div class="stat-label">Average Rating</div>
            </div>
            <div class="stat-card">
                <span class="stat-value">@Model.Where(r => r.Rating <= 2).Count()</span>
                <div class="stat-label">Needs Attention</div>
            </div>
        </div>

        <!-- Controls Section -->
        <div class="controls-section">
            <div class="search-box">
                <i class="fas fa-search"></i>
                <input type="text" id="searchInput" placeholder="Search reviews by user or content...">
            </div>
            <div class="filter-buttons">
                <button class="filter-btn active" data-filter="all">
                    <i class="fas fa-list"></i> All
                </button>
                <button class="filter-btn" data-filter="5">
                    <i class="fas fa-star"></i> 5 Stars
                </button>
                <button class="filter-btn" data-filter="4">
                    <i class="fas fa-star"></i> 4 Stars
                </button>
                <button class="filter-btn" data-filter="low">
                    <i class="fas fa-exclamation-triangle"></i> Low Ratings
                </button>
            </div>
        </div>

        <!-- Reviews Grid -->
        <div class="reviews-grid">
            @foreach (var review in Model)
            {
                <div class="review-card" data-rating="@review.Rating" data-username="@review.UserName.ToLower()" data-content="@review.Content.ToLower()">
                    <div class="review-header">
                        <div class="user-info">
                            <div class="user-avatar">
                                @review.UserName.FirstOrDefault()
                            </div>
                            <div class="user-details">
                                <h4>@review.UserName</h4>
                                <div class="review-date">
                                    <i class="fas fa-calendar-alt"></i>
                                    @DateTime.Now.AddDays(-new Random().Next(1, 30)).ToString("MMM dd, yyyy")
                                </div>
                            </div>
                        </div>

                        <div class="rating-display">
                            <div class="stars">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <i class="fas fa-star @(i <= review.Rating ? "" : "empty")"></i>
                                }
                            </div>
                            <span class="rating-text">@review.Rating/5</span>
                        </div>
                    </div>

                    <div class="review-content">
                        @review.Content
                    </div>

                    <div class="review-actions">
                        <a href="#" class="action-btn btn-view">
                            <i class="fas fa-eye"></i>
                            View Details
                        </a>
                        @if (review.Rating >= 4)
                        {
                            <a href="#" class="action-btn btn-approve">
                                <i class="fas fa-thumbs-up"></i>
                                Feature
                            </a>
                        }
                        <a asp-area="Admin" asp-controller="Review" asp-action="Delete" asp-route-id="@review.Id"
                           class="action-btn btn-delete"
                           onclick="return confirm('Are you sure you want to delete this review?')">
                            <i class="fas fa-trash-alt"></i>
                            Delete
                        </a>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="no-reviews">
            <i class="fas fa-star-half-alt"></i>
            <h3>No Reviews Yet</h3>
            <p>When customers leave reviews for your sport gear, they'll appear here for you to manage.</p>
        </div>
    }
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Search functionality
        const searchInput = document.getElementById('searchInput');
        const reviewCards = document.querySelectorAll('.review-card');
        const filterButtons = document.querySelectorAll('.filter-btn');

        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            reviewCards.forEach(card => {
                const username = card.dataset.username;
                const content = card.dataset.content;
                const isVisible = username.includes(searchTerm) || content.includes(searchTerm);
                card.style.display = isVisible ? 'block' : 'none';
            });
        });

        // Filter functionality
        filterButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Remove active class from all buttons
                filterButtons.forEach(btn => btn.classList.remove('active'));
                // Add active class to clicked button
                this.classList.add('active');

                const filter = this.dataset.filter;
                reviewCards.forEach(card => {
                    const rating = parseInt(card.dataset.rating);
                    let isVisible = true;

                    switch(filter) {
                        case 'all':
                            isVisible = true;
                            break;
                        case '5':
                            isVisible = rating === 5;
                            break;
                        case '4':
                            isVisible = rating === 4;
                            break;
                        case 'low':
                            isVisible = rating <= 2;
                            break;
                    }

                    card.style.display = isVisible ? 'block' : 'none';
                });
            });
        });

        // Add smooth animations to cards
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.animation = 'fadeInUp 0.6s ease-out';
                }
            });
        });

        reviewCards.forEach(card => {
            observer.observe(card);
        });
    });
</script>