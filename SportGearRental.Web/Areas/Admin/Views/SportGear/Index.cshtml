@model IEnumerable<SportGearRental.ViewModels.SportGear.SportGearListViewModel>
@{
    Layout = "_AdminLayout";
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
<style>
    body {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        min-height: 100vh;
    }

    .management-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
        animation: fadeInUp 0.6s ease-out;
    }

    .page-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 3rem 2rem;
        border-radius: 25px;
        text-align: center;
        color: white;
        position: relative;
        overflow: hidden;
        margin-bottom: 2rem;
        box-shadow: 0 15px 35px rgba(102, 126, 234, 0.3);
    }

        .page-header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: repeating-linear-gradient( 45deg, transparent, transparent 15px, rgba(255,255,255,0.1) 15px, rgba(255,255,255,0.1) 30px );
            animation: slidePattern 4s linear infinite;
        }

    .header-icon {
        font-size: 3.5rem;
        margin-bottom: 1rem;
        animation: bounce 2s infinite;
        position: relative;
        z-index: 2;
    }

    .page-title {
        font-size: 2.5rem;
        font-weight: 300;
        margin: 0;
        position: relative;
        z-index: 2;
    }

    .page-subtitle {
        opacity: 0.9;
        margin-top: 0.5rem;
        font-size: 1.1rem;
        position: relative;
        z-index: 2;
    }

    .action-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        animation: slideInRight 0.6s ease-out;
    }

    .gear-stats {
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    .stat-card {
        background: white;
        padding: 1rem 1.5rem;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        display: flex;
        align-items: center;
        gap: 0.8rem;
        animation: fadeInLeft 0.8s ease-out;
    }

        .stat-card i {
            font-size: 1.5rem;
            color: #667eea;
        }

        .stat-card .stat-number {
            font-size: 1.8rem;
            font-weight: 600;
            color: #2c3e50;
        }

        .stat-card .stat-label {
            font-size: 0.9rem;
            color: #7f8c8d;
        }

    .add-gear-btn {
        background: linear-gradient(135deg, #2ecc71, #27ae60);
        color: white;
        padding: 1rem 2rem;
        border: none;
        border-radius: 50px;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 0.8rem;
        box-shadow: 0 8px 20px rgba(46, 204, 113, 0.3);
        animation: addButtonPulse 3s infinite;
    }

        .add-gear-btn:hover {
            background: linear-gradient(135deg, #27ae60, #229954);
            transform: translateY(-3px);
            box-shadow: 0 12px 25px rgba(46, 204, 113, 0.5);
            color: white;
            text-decoration: none;
        }

    .gear-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 2rem;
        margin-top: 2rem;
        animation: fadeInUp 0.8s ease-out;
    }

    .gear-card {
        background: white;
        border-radius: 20px;
        padding: 2rem;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        animation: cardSlideIn 0.6s ease-out;
        border-left: 4px solid #667eea;
    }

        .gear-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
        }

        .gear-card::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 100px;
            height: 100px;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
            border-radius: 0 0 0 100px;
            transition: all 0.3s ease;
        }

        .gear-card:hover::before {
            width: 150px;
            height: 150px;
        }

    .gear-icon {
        font-size: 2.5rem;
        color: #667eea;
        margin-bottom: 1rem;
        animation: float 3s ease-in-out infinite;
    }

    .gear-name {
        font-size: 1.4rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.5rem;
        position: relative;
        z-index: 2;
    }

    .gear-price {
        font-size: 1.8rem;
        font-weight: 700;
        color: #667eea;
        margin-bottom: 1.5rem;
        position: relative;
        z-index: 2;
    }

        .gear-price .currency {
            font-size: 1rem;
            opacity: 0.7;
        }

        .gear-price .period {
            font-size: 0.9rem;
            opacity: 0.6;
            font-weight: 400;
        }

    .gear-actions {
        display: flex;
        gap: 0.8rem;
        justify-content: space-between;
        position: relative;
        z-index: 2;
    }

    .action-btn {
        flex: 1;
        padding: 0.8rem 1rem;
        border: none;
        border-radius: 12px;
        font-size: 0.9rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .btn-details {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
    }

        .btn-details:hover {
            background: linear-gradient(135deg, #2980b9, #1f639a);
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(52, 152, 219, 0.4);
            color: white;
            text-decoration: none;
        }

    .btn-edit {
        background: linear-gradient(135deg, #f39c12, #e67e22);
        color: white;
    }

        .btn-edit:hover {
            background: linear-gradient(135deg, #e67e22, #d35400);
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(243, 156, 18, 0.4);
            color: white;
            text-decoration: none;
        }

    .btn-delete {
        background: linear-gradient(135deg, #e74c3c, #c0392b);
        color: white;
    }

        .btn-delete:hover {
            background: linear-gradient(135deg, #c0392b, #a93226);
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(231, 76, 60, 0.4);
            color: white;
            text-decoration: none;
        }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        animation: fadeInUp 0.8s ease-out;
    }

        .empty-state i {
            font-size: 4rem;
            color: #bdc3c7;
            margin-bottom: 1rem;
        }

        .empty-state h3 {
            color: #2c3e50;
            margin-bottom: 0.5rem;
        }

        .empty-state p {
            color: #7f8c8d;
            margin-bottom: 2rem;
        }

    .floating-shapes {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        overflow: hidden;
        z-index: -1;
    }

    .shape {
        position: absolute;
        opacity: 0.05;
        animation: float 8s ease-in-out infinite;
    }

        .shape:nth-child(1) {
            top: 10%;
            left: 5%;
            animation-delay: 0s;
        }

        .shape:nth-child(2) {
            top: 50%;
            right: 10%;
            animation-delay: 3s;
        }

        .shape:nth-child(3) {
            bottom: 20%;
            left: 15%;
            animation-delay: 6s;
        }

        .shape:nth-child(4) {
            top: 30%;
            left: 50%;
            animation-delay: 1.5s;
        }

    @@keyframes fadeInUp {
        from

    {
        opacity: 0;
        transform: translateY(30px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    @@keyframes slideInRight {
        from

    {
        opacity: 0;
        transform: translateX(30px);
    }

    to {
        opacity: 1;
        transform: translateX(0);
    }

    }

    @@keyframes fadeInLeft {
        from

    {
        opacity: 0;
        transform: translateX(-30px);
    }

    to {
        opacity: 1;
        transform: translateX(0);
    }

    }

    @@keyframes cardSlideIn {
        from

    {
        opacity: 0;
        transform: translateY(50px) scale(0.95);
    }

    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }

    }

    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100%

    {
        transform: translateY(0);
    }

    40% {
        transform: translateY(-10px);
    }

    60% {
        transform: translateY(-5px);
    }

    }

    @@keyframes float {
        0%, 100%

    {
        transform: translateY(0px) rotate(0deg);
    }

    50% {
        transform: translateY(-15px) rotate(180deg);
    }

    }

    @@keyframes addButtonPulse {
        0%, 100%

    {
        box-shadow: 0 8px 20px rgba(46, 204, 113, 0.3);
    }

    50% {
        box-shadow: 0 8px 20px rgba(46, 204, 113, 0.6);
    }

    }

    @@keyframes slidePattern {
        0%

    {
        transform: translateX(-50px);
    }

    100% {
        transform: translateX(50px);
    }

    }

    @@media (max-width: 768px) {
        .management-container

    {
        padding: 1rem;
    }

    .page-header {
        padding: 2rem 1.5rem;
    }

    .page-title {
        font-size: 2rem;
    }

    .header-icon {
        font-size: 2.5rem;
    }

    .action-header {
        flex-direction: column;
        gap: 1rem;
    }

    .gear-stats {
        flex-wrap: wrap;
        justify-content: center;
    }

    .gear-grid {
        grid-template-columns: 1fr;
        gap: 1.5rem;
    }

    .gear-actions {
        flex-direction: column;
    }

    .action-btn {
        justify-content: center;
    }

    }
</style>

<div class="management-container">
    <!-- Floating Background Shapes -->
    <div class="floating-shapes">
        <div class="shape">
            <i class="fas fa-dumbbell" style="font-size: 60px; color: #667eea;"></i>
        </div>
        <div class="shape">
            <i class="fas fa-bicycle" style="font-size: 55px; color: #667eea;"></i>
        </div>
        <div class="shape">
            <i class="fas fa-football-ball" style="font-size: 50px; color: #667eea;"></i>
        </div>
        <div class="shape">
            <i class="fas fa-skiing" style="font-size: 65px; color: #667eea;"></i>
        </div>
    </div>

    <!-- Page Header -->
    <div class="page-header">
        <div class="header-icon">
            <i class="fas fa-cogs"></i>
        </div>
        <h2 class="page-title">Sport Gear Management</h2>
        <p class="page-subtitle">Manage your sports equipment inventory with ease</p>
    </div>

    <!-- Action Header -->
    <div class="action-header">
        <div class="gear-stats">
            <div class="stat-card">
                <i class="fas fa-boxes"></i>
                <div>
                    <div class="stat-number">@Model.Count()</div>
                    <div class="stat-label">Total Items</div>
                </div>
            </div>
            <div class="stat-card">
                <i class="fas fa-dollar-sign"></i>
                <div>
                    <div class="stat-number">@Model.Sum(g => g.PricePerDay).ToString("C0")</div>
                    <div class="stat-label">Daily Value</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Gear Grid -->
    @if (Model.Any())
    {
        <div class="gear-grid">
            @foreach (var gear in Model.Select((value, index) => new { value, index }))
            {
                <div class="gear-card" style="animation-delay: @(gear.index * 0.1)s">
                    <div class="gear-icon">
                        @{
                            var gearIcons = new Dictionary<string, string>
                {
                {"bike", "fas fa-bicycle"},
                {"ball", "fas fa-football-ball"},
                {"weight", "fas fa-dumbbell"},
                {"ski", "fas fa-skiing"},
                {"tennis", "fas fa-table-tennis"},
                {"default", "fas fa-tools"}
                };

                            var iconClass = "fas fa-tools"; // default
                            var gearName = gear.value.Name.ToLower();

                            foreach (var icon in gearIcons)
                            {
                                if (gearName.Contains(icon.Key))
                                {
                                    iconClass = icon.Value;
                                    break;
                                }
                            }
                        }

                        <i class="@iconClass"></i>
                    </div>

                    <div class="gear-name">@gear.value.Name</div>

                    <div class="gear-price">
                        <span class="currency">$</span>@gear.value.PricePerDay.ToString("0.00")
                        <span class="period">/day</span>
                    </div>

                    <div class="gear-actions">
                        <a asp-area="" asp-controller="SportGear" asp-action="Details" asp-route-id="@gear.value.Id" class="action-btn btn-details">
                            <i class="fas fa-eye"></i>
                            Details
                        </a>
                        <a asp-area="" asp-controller="SportGear" asp-action="Edit" asp-route-id="@gear.value.Id" class="action-btn btn-edit">
                            <i class="fas fa-edit"></i>
                            Edit
                        </a>
                        <a asp-area="" asp-controller="SportGear" asp-action="Delete" asp-route-id="@gear.value.Id" class="action-btn btn-delete">
                            <i class="fas fa-trash-alt"></i>
                            Delete
                        </a>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-state">
            <i class="fas fa-box-open"></i>
            <h3>No Sport Gear Available</h3>
            <p>Start by adding your first piece of sports equipment to the inventory.</p>
            <a asp-action="Create" class="add-gear-btn">
                <i class="fas fa-plus"></i>
                Add Your First Gear
            </a>
        </div>
    }
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Add floating animation to background shapes
        const shapes = document.querySelectorAll('.floating-shapes .shape');
        shapes.forEach((shape, index) => {
            shape.style.left = Math.random() * 90 + 5 + '%';
            shape.style.top = Math.random() * 90 + 5 + '%';
            shape.style.animationDelay = Math.random() * 8 + 's';
        });

        // Add hover effects to gear cards
        const gearCards = document.querySelectorAll('.gear-card');
        gearCards.forEach(card => {
            card.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-10px) scale(1.02)';
            });

            card.addEventListener('mouseleave', function() {
                this.style.transform = 'translateY(0) scale(1)';
            });
        });

        // Add click confirmation for delete buttons
        const deleteButtons = document.querySelectorAll('.btn-delete');
        deleteButtons.forEach(btn => {
            btn.addEventListener('click', function(e) {
                if (!confirm('⚠️ Are you sure you want to delete this gear item? This action cannot be undone!')) {
                    e.preventDefault();
                }
            });
        });

        // Animate statistics on page load
        const statNumbers = document.querySelectorAll('.stat-number');
        statNumbers.forEach(stat => {
            const finalValue = parseInt(stat.textContent.replace(/[^0-9]/g, '')) || 0;
            let currentValue = 0;
            const increment = finalValue / 50;

            const timer = setInterval(() => {
                currentValue += increment;
                if (currentValue >= finalValue) {
                    stat.textContent = stat.textContent; // Keep original formatting
                    clearInterval(timer);
                } else {
                    if (stat.textContent.includes('$')) {
                        stat.textContent = '$' + Math.floor(currentValue);
                    } else {
                        stat.textContent = Math.floor(currentValue);
                    }
                }
            }, 20);
        });

        // Add staggered animation to gear cards
        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry, index) => {
                if (entry.isIntersecting) {
                    setTimeout(() => {
                        entry.target.style.opacity = '1';
                        entry.target.style.transform = 'translateY(0)';
                    }, index * 100);
                }
            });
        });

        gearCards.forEach(card => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(30px)';
            card.style.transition = 'all 0.6s ease';
            observer.observe(card);
        });
    });
</script>